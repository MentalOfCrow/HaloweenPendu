func main() {
	var choice int
	for {
		fmt.Println("Menu:")
		fmt.Println("1. Choisir un fichier txt")
		fmt.Println("2. Récupérer le texte contenu dans le fichier")
		fmt.Println("3. Ajouter du texte dans le fichier")
		fmt.Println("4. Supprimer tout le contenu du fichier")
		fmt.Println("5. Remplacer tout le contenu du fichier")
		fmt.Println("6. Créer un fichier txt")
		fmt.Println("7. Supprimer un fichier txt")
		fmt.Println("8. Quitter")
		fmt.Print("Sélectionnez une option : ")
		fmt.Scan(&choice)

		switch choice {
		case 1:
			var filename string
			fmt.Print("Entrez le nom du fichier txt : ")
			fmt.Scan(&filename)
			readFile(filename)
		case 2:
			var filename string
			fmt.Print("Entrez le nom du fichier txt : ")
			fmt.Scan(&filename)
			readFileContent(filename)
		case 3:
			var filename, text string
			fmt.Print("Entrez le nom du fichier txt : ")
			fmt.Scan(&filename)
			fmt.Print("Entrez le texte à ajouter : ")
			fmt.Scan(&text)
			appendToFile(filename, text)
		case 4:
			var filename string
			fmt.Print("Entrez le nom du fichier txt : ")
			fmt.Scan(&filename)
			clearFileContent(filename)
		case 5:
			var filename, text string
			fmt.Print("Entrez le nom du fichier txt : ")
			fmt.Scan(&filename)
			fmt.Print("Entrez le nouveau texte : ")
			fmt.Scan(&text)
			replaceFileContent(filename, text)
		case 6:
			var filename string
			fmt.Print("Entrez le nom du nouveau fichier txt : ")
			fmt.Scan(&filename)
			createFile(filename)
		case 7:
			var filename string
			fmt.Print("Entrez le nom du fichier txt à supprimer : ")
			fmt.Scan(&filename)
			deleteFile(filename)
		case 8:
			fmt.Println("Au revoir!")
			return
		default:
			fmt.Println("Option invalide. Veuillez choisir une option valide.")
		}
	}
}

func readFile(filename string) {
	// Vérifier si le fichier existe
	_, err := os.Stat(filename)
	if os.IsNotExist(err) {
		fmt.Println("Le fichier n'existe pas.")
		return
	}

	fmt.Println("Fichier trouvé : ", filename)
}

func readFileContent(filename string) {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		fmt.Println("Erreur lors de la lecture du fichier :", err)
		return
	}
	fmt.Println("Contenu du fichier :")
	fmt.Println(string(data))
}

func appendToFile(filename, text string) {
	file, err := os.OpenFile(filename, os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		fmt.Println("Erreur lors de l'ouverture du fichier :", err)
		return
	}
	defer file.Close()

	_, err = file.WriteString(text)
	if err != nil {
		fmt.Println("Erreur lors de l'écriture dans le fichier :", err)
	}
	fmt.Println("Texte ajouté avec succès.")
}

func clearFileContent(filename string) {
	err := ioutil.WriteFile(filename, []byte(""), 0644)
	if err != nil {
		fmt.Println("Erreur lors de la suppression du contenu du fichier :", err)
		return
	}
	fmt.Println("Contenu du fichier supprimé avec succès.")
}

func replaceFileContent(filename, text string) {
	err := ioutil.WriteFile(filename, []byte(text), 0644)
	if err != nil {
		fmt.Println("Erreur lors du remplacement du contenu du fichier :", err)
		return
	}
	fmt.Println("Contenu du fichier remplacé avec succès.")
}

func createFile(filename string) {
	_, err := os.Create(filename)
	if err != nil {
		fmt.Println("Erreur lors de la création du fichier :", err)
		return
	}
	fmt.Println("Fichier créé avec succès.")
}

func deleteFile(filename string) {
	err := os.Remove(filename)
	if err != nil {
		fmt.Println("Erreur lors de la suppression du fichier :", err)
		return
	}
	fmt.Println("Fichier supprimé avec succès.")
}
